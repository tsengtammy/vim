"----------------------------------------------------
" General
"----------------------------------------------------
set nocompatible
set mouse=a
set clipboard=unnamed
set history=1729
set ruler
set number
set showcmd
set hlsearch
set showmatch
set incsearch
set backspace=indent,eol,start
set tabstop=4
set softtabstop=4
set shiftwidth=4
set laststatus=2
set expandtab
set smarttab
set autoindent

set encoding=utf-8
set ignorecase

set splitbelow
set splitright
set cursorline
set cursorcolumn

" automatically source vimrc on write
autocmd! bufwritepost .vimrc source %
"----------------------------------------------------
" Mappings for Plugins and Vim
"----------------------------------------------------
iab mechdata rlopez afrancis jwilcox adeveau
" make code look pretty
let python_highlight_all=1
syntax on
" map fzf leader to semicolon
map ; :GFiles<CR>
" open fzf most recently opened files
map <leader><leader>h :History<CR>
" maps go to declaration
nnoremap <C-X> :YcmCompleter GoToDeclaration<CR>
set completeopt-=preview
" apply YCM FixIt
nnoremap <C-F> :YcmCompleter FixIt<CR>
" map the set paste / no paste command
set pastetoggle=<leader>p
" map highlight off
map <leader>h :noh<CR>
" map Space to save buffer
map <Space> :w<CR>
" make copy-paste nice
function! ToggleMouse()
    if &mouse == 'a'
        set mouse=r
        set nonu
    else
        set mouse=a
        set nu
    endif
endfunction
nnoremap <leader>y :call ToggleMouse()<CR>
" vim tabs
nnoremap gr gT
nnoremap <C-t> :tabe<CR>
nnoremap <C-w> :tabclose<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" vim splits
nnoremap hh <C-w>h
nnoremap jj <C-w>j
nnoremap kk <C-w>k
nnoremap ll <C-w>l
" exit insert mode with
 inoremap jk <ESC>
"Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
" set d to black_hole delete, not cut
nnoremap d "_d
vnoremap d "_d
let mapleader = "\\"

" <c-c> bound in insert mode to sql completion,
" turn it off
let g:omni_sql_no_default_maps = 1

" see full diagnostic message for diagnostics in location list
" open and close with :lopen :lclose
let g:ycm_always_populate_location_list = 1

" diagnostic signs
let g:ycm_enable_diagnostic_signs = 1

" use :call TrimWhitespace()
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

"----------------------------------------------------
" Mappings for Quora-specific files
"----------------------------------------------------
" Notifications
nmap <leader>cni :e ~/ans/web/lib/a/controller/notif/__init__.py<CR>
"----------------------------------------------------
" Plugins using plug.vim
"----------------------------------------------------

call plug#begin('~/.vim/plugged')

" fuzzy search within vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" project drawer in vim
Plug 'tpope/vim-vinegar'

" class outline viewer in vim
Plug 'majutsushi/tagbar'

" commenting in vim
Plug 'tomtom/tcomment_vim'

" lean status and tabline for vim
Plug 'vim-airline/vim-airline'

" themes for vim airline
Plug 'vim-airline/vim-airline-themes'

" highlights all whitespace
Plug 'ntpeters/vim-better-whitespace'

" solarized theme for vim
Plug 'altercation/vim-colors-solarized'

" moving to any word in the file easily
Plug 'easymotion/vim-easymotion'

" syntax highlighting for python
Plug 'nvie/vim-flake8'

" wrapper around git
Plug 'tpope/vim-fugitive'

" javascript syntax and indentation support for vim
Plug 'pangloss/vim-javascript'

" jsx syntax highlighting support for vim
Plug 'peitalin/vim-jsx-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'jparise/vim-graphql'

" code completion for vim
Plug 'ycm-core/youcompleteme'

call plug#end()

" Brief help
" PlugInstall       - Install plugins
" PlugUpdate        - Install or update plugins
" PlugClean[!]      - Remove unlisted plugins (bang cleans without prompt)
" PlugUpgrade       - Upgrade vim-plug itself
" PlugStatus        - Check the status of plugins
" PlugDiff          - Examine changes from prev update and pending changes
" Put your non-Plug stuff after this line
"----------------------------------------------------
" Solarized Theme
"----------------------------------------------------
syntax enable
set background=dark
let g:solarized_termcolors=256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized

" YCM
" trying to set the color background but not working
highlight YcmErrorLine guibg=#3f0000
"----------------------------------------------------
" End of File
"----------------------------------------------------




